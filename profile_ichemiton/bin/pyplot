#!/usr/bin/env python

from __future__ import print_function

#%matplotlib
# import matplotlib
# matplotlib.use('AGG')
# print(matplotlib.get_backend())

import numpy as np
import matplotlib.pyplot as plt
import itertools



config = {
    'xlabel_fontsize': 16,
    'ylabel_fontsize': 16,
    'marker_default': True,
    'marker_to_cycle': ('+', '.', 'o', '*'),
    'line_default': True,
    'linestyle': '-',
}

def main():
    args = _parser()

    columns = _parseColumns(args.columns)
    filenames = args.filenames
    labels = _parseKeys(filenames, columns, args.keys)
   
    if _toggle(config['marker_default'], args.markers):
        marker = itertools.cycle(config['marker_to_cycle'])
    else:
        marker = itertools.cycle(('', ''))

    if _toggle(config['line_default'], args.line):
        linestyle = config['linestyle']
    else:
        linestyle = ''

    if args.xlabel: plt.xlabel(args.xlabel, fontsize=config['xlabel_fontsize'])
    if args.ylabel: plt.ylabel(args.ylabel, fontsize=config['ylabel_fontsize'])

    k = 0
    for filename in filenames:
        data = np.loadtxt(filename, usecols=columns)
        for i,c in enumerate(columns[1:]):
            plt.plot(data.T[0],data.T[i+1], label=labels[k], marker=marker.next(), linestyle=linestyle)
            k += 1

    if args.legend: 
        lg=plt.legend(loc='best', prop={'size':'10'}, fancybox=True)
        lg.draw_frame(False)

    if args.xrange: plt.xlim(_parseRange(args.xrange, plt.xlim()))
    if args.yrange: plt.ylim(_parseRange(args.yrange, plt.ylim()))
    
    plt.show()

def _parseRange(rangel, lims):
    for i in xrange(2):
        if rangel[i] == ':':
            rangel[i] = lims[i]
        else:
            rangel[i] = float(rangel[i])

    print(rangel)
    return rangel

def _toggle(default, toggle):
    if default:
        if toggle:
            return False
        else:
            return True
    else:
        if toggle:
            return True
        else:
            return False

def _parseKeys(filenames, columns, keys):
    labels = []
    if keys:
        i = 0
        for f in filenames:
            for c in columns[1:]:
                if i >= len(keys) or keys[i] == '?':
                    labels.append('%s-%i:%i' % (f, columns[0]+1, c+1))
                else:
                    labels.append(keys[i])
                i += 1
    else:
        for f in filenames:
            label = '%s-' % f
            for c in columns[1:]:
                label += '%i:%i' %(columns[0]+1, c+1)
                labels.append(label)
                label = ''
                    
    return labels

def _parseColumns(columns):
    import re
    tmp = []
    colRange = re.compile('(\d+)-(\d+)')
    if columns:
        for c in columns:
            if colRange.match(c):
                tmp = tmp + range(int(colRange.match(c).group(1)), int(colRange.match(c).group(2))+1)
            else:
                tmp.append(int(c))
    else:
        tmp = [1,2]
    
    return map(lambda x: x-1, tmp) # To use column indexes starting from 1 instrad of 0

def _parser():
    import argparse
    parser = argparse.ArgumentParser(version='%prog 1.0',
                                     description='Build Graph')

    parser.add_argument('filenames',
                        action = 'store',
                        type = str,
                        metavar = '<FILENAME>',
                        nargs = '+',
                        help = 'file containing the data (# is comment)')

    parser.add_argument('-c', '--columns',
                        action = 'store',
                        dest = 'columns',
                        type = str,
                        nargs = '*',
                        metavar = 'col',
                        help = 'columns to build the graph (starting from 1)')

    parser.add_argument('-nl', '--no-legend',
                        action = 'store_false',
                        dest = 'legend',
                        default = True,
                        help = 'suppress the legend on the output')

    parser.add_argument('-ks', '--keys',
                        action = 'store',
                        dest = 'keys',
                        type = str,
                        nargs = '*',
                        metavar = 'key',
                        help = 'keys for the legend (if ? normal key will be used)')

    parser.add_argument('-xl', '--xlabel',
                        action = 'store',
                        dest = 'xlabel',
                        type = str,
                        default = '',
                        help = 'label of the x axis ')

    parser.add_argument('-yl', '--ylabel',
                        action = 'store',
                        dest = 'ylabel',
                        type = str,
                        default = '',
                        help = 'label of the y axis ')

    parser.add_argument('-m', '--markers',
                        action = 'store_const',
                        const = 'mark_toggle',
                        dest = 'markers',
                        help = 'toggle markers',)

    parser.add_argument('-l', '--line',
                        action = 'store_const',
                        const = 'line_toggle',
                        dest = 'line',
                        help = 'toggle line',)

    parser.add_argument('-xr', '--xrange',
                        action = 'store',
                        dest = 'xrange',
                        nargs = 2,
                        help = 'set the x range (: for nothing)')

    parser.add_argument('-yr', '--yrange',
                        action = 'store',
                        dest = 'yrange',
                        nargs = 2,
                        help = 'set the y range (: for nothing)')
    
    return parser.parse_args()
    


if __name__ == '__main__':
    main()
